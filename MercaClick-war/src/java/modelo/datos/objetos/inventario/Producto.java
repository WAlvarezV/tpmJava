/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelo.datos.objetos.inventario;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Producto Value Object.
  * This class is value object representing database table PRODUCTO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Producto implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_PRODUCTO;
    private int SUBCATEGORIA;
    private int MARCA;
    private String MODELO;
    private String DESCRIPCION;
    private String SERIAL;
    private String CODIGO_BARRAS;
    private double VALOR;
    private double IMPUESTO;
    private int ANULADO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Producto () {

    }

    public Producto (int ID_PRODUCTOIn) {

          this.ID_PRODUCTO = ID_PRODUCTOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_PRODUCTO() {
          return this.ID_PRODUCTO;
    }
    public void setID_PRODUCTO(int ID_PRODUCTOIn) {
          this.ID_PRODUCTO = ID_PRODUCTOIn;
    }

    public int getSUBCATEGORIA() {
          return this.SUBCATEGORIA;
    }
    public void setSUBCATEGORIA(int SUBCATEGORIAIn) {
          this.SUBCATEGORIA = SUBCATEGORIAIn;
    }

    public int getMARCA() {
          return this.MARCA;
    }
    public void setMARCA(int MARCAIn) {
          this.MARCA = MARCAIn;
    }

    public String getMODELO() {
          return this.MODELO;
    }
    public void setMODELO(String MODELOIn) {
          this.MODELO = MODELOIn;
    }

    public String getDESCRIPCION() {
          return this.DESCRIPCION;
    }
    public void setDESCRIPCION(String DESCRIPCIONIn) {
          this.DESCRIPCION = DESCRIPCIONIn;
    }

    public String getSERIAL() {
          return this.SERIAL;
    }
    public void setSERIAL(String SERIALIn) {
          this.SERIAL = SERIALIn;
    }

    public String getCODIGO_BARRAS() {
          return this.CODIGO_BARRAS;
    }
    public void setCODIGO_BARRAS(String CODIGO_BARRASIn) {
          this.CODIGO_BARRAS = CODIGO_BARRASIn;
    }

    public double getVALOR() {
          return this.VALOR;
    }
    public void setVALOR(double VALORIn) {
          this.VALOR = VALORIn;
    }

    public double getIMPUESTO() {
          return this.IMPUESTO;
    }
    public void setIMPUESTO(double IMPUESTOIn) {
          this.IMPUESTO = IMPUESTOIn;
    }

    public int getANULADO() {
          return this.ANULADO;
    }
    public void setANULADO(int ANULADOIn) {
          this.ANULADO = ANULADOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_PRODUCTOIn,
          int SUBCATEGORIAIn,
          int MARCAIn,
          String MODELOIn,
          String DESCRIPCIONIn,
          String SERIALIn,
          String CODIGO_BARRASIn,
          double VALORIn,
          double IMPUESTOIn,
          int ANULADOIn) {
          this.ID_PRODUCTO = ID_PRODUCTOIn;
          this.SUBCATEGORIA = SUBCATEGORIAIn;
          this.MARCA = MARCAIn;
          this.MODELO = MODELOIn;
          this.DESCRIPCION = DESCRIPCIONIn;
          this.SERIAL = SERIALIn;
          this.CODIGO_BARRAS = CODIGO_BARRASIn;
          this.VALOR = VALORIn;
          this.IMPUESTO = IMPUESTOIn;
          this.ANULADO = ANULADOIn;
    }


    /** 
     * hasEqualMapping-method will compare two Producto instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Producto valueObject) {

          if (valueObject.getID_PRODUCTO() != this.ID_PRODUCTO) {
                    return(false);
          }
          if (valueObject.getSUBCATEGORIA() != this.SUBCATEGORIA) {
                    return(false);
          }
          if (valueObject.getMARCA() != this.MARCA) {
                    return(false);
          }
          if (this.MODELO == null) {
                    if (valueObject.getMODELO() != null)
                           return(false);
          } else if (!this.MODELO.equals(valueObject.getMODELO())) {
                    return(false);
          }
          if (this.DESCRIPCION == null) {
                    if (valueObject.getDESCRIPCION() != null)
                           return(false);
          } else if (!this.DESCRIPCION.equals(valueObject.getDESCRIPCION())) {
                    return(false);
          }
          if (this.SERIAL == null) {
                    if (valueObject.getSERIAL() != null)
                           return(false);
          } else if (!this.SERIAL.equals(valueObject.getSERIAL())) {
                    return(false);
          }
          if (this.CODIGO_BARRAS == null) {
                    if (valueObject.getCODIGO_BARRAS() != null)
                           return(false);
          } else if (!this.CODIGO_BARRAS.equals(valueObject.getCODIGO_BARRAS())) {
                    return(false);
          }
          if (valueObject.getVALOR() != this.VALOR) {
                    return(false);
          }
          if (valueObject.getIMPUESTO() != this.IMPUESTO) {
                    return(false);
          }
          if (valueObject.getANULADO() != this.ANULADO) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Producto, mapping to table PRODUCTO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_PRODUCTO = " + this.ID_PRODUCTO + "\n"); 
        out.append("SUBCATEGORIA = " + this.SUBCATEGORIA + "\n"); 
        out.append("MARCA = " + this.MARCA + "\n"); 
        out.append("MODELO = " + this.MODELO + "\n"); 
        out.append("DESCRIPCION = " + this.DESCRIPCION + "\n"); 
        out.append("SERIAL = " + this.SERIAL + "\n"); 
        out.append("CODIGO_BARRAS = " + this.CODIGO_BARRAS + "\n"); 
        out.append("VALOR = " + this.VALOR + "\n"); 
        out.append("IMPUESTO = " + this.IMPUESTO + "\n"); 
        out.append("ANULADO = " + this.ANULADO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Producto cloned = new Producto();

        cloned.setID_PRODUCTO(this.ID_PRODUCTO); 
        cloned.setSUBCATEGORIA(this.SUBCATEGORIA); 
        cloned.setMARCA(this.MARCA); 
        if (this.MODELO != null)
             cloned.setMODELO(new String(this.MODELO)); 
        if (this.DESCRIPCION != null)
             cloned.setDESCRIPCION(new String(this.DESCRIPCION)); 
        if (this.SERIAL != null)
             cloned.setSERIAL(new String(this.SERIAL)); 
        if (this.CODIGO_BARRAS != null)
             cloned.setCODIGO_BARRAS(new String(this.CODIGO_BARRAS)); 
        cloned.setVALOR(this.VALOR); 
        cloned.setIMPUESTO(this.IMPUESTO); 
        cloned.setANULADO(this.ANULADO); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}