/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelo.datos.objetos.inventario;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Stock Value Object.
  * This class is value object representing database table STOCK
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Stock implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_STOCK;
    private int ID_PRODUCTO;
    private int ID_SEDE;
    private int ID_UNIDAD_MEDIDA;
    private double STOCK;
    private double CANTIDAD_MIN;
    private double CANTIDAD_MAX;
    private int ANULADO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Stock () {

    }

    public Stock (int ID_STOCKIn) {

          this.ID_STOCK = ID_STOCKIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_STOCK() {
          return this.ID_STOCK;
    }
    public void setID_STOCK(int ID_STOCKIn) {
          this.ID_STOCK = ID_STOCKIn;
    }

    public int getID_PRODUCTO() {
          return this.ID_PRODUCTO;
    }
    public void setID_PRODUCTO(int ID_PRODUCTOIn) {
          this.ID_PRODUCTO = ID_PRODUCTOIn;
    }

    public int getID_SEDE() {
          return this.ID_SEDE;
    }
    public void setID_SEDE(int ID_SEDEIn) {
          this.ID_SEDE = ID_SEDEIn;
    }

    public int getID_UNIDAD_MEDIDA() {
          return this.ID_UNIDAD_MEDIDA;
    }
    public void setID_UNIDAD_MEDIDA(int ID_UNIDAD_MEDIDAIn) {
          this.ID_UNIDAD_MEDIDA = ID_UNIDAD_MEDIDAIn;
    }

    public double getSTOCK() {
          return this.STOCK;
    }
    public void setSTOCK(double STOCKIn) {
          this.STOCK = STOCKIn;
    }

    public double getCANTIDAD_MIN() {
          return this.CANTIDAD_MIN;
    }
    public void setCANTIDAD_MIN(double CANTIDAD_MINIn) {
          this.CANTIDAD_MIN = CANTIDAD_MINIn;
    }

    public double getCANTIDAD_MAX() {
          return this.CANTIDAD_MAX;
    }
    public void setCANTIDAD_MAX(double CANTIDAD_MAXIn) {
          this.CANTIDAD_MAX = CANTIDAD_MAXIn;
    }

    public int getANULADO() {
          return this.ANULADO;
    }
    public void setANULADO(int ANULADOIn) {
          this.ANULADO = ANULADOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_STOCKIn,
          int ID_PRODUCTOIn,
          int ID_SEDEIn,
          int ID_UNIDAD_MEDIDAIn,
          double STOCKIn,
          double CANTIDAD_MINIn,
          double CANTIDAD_MAXIn,
          int ANULADOIn) {
          this.ID_STOCK = ID_STOCKIn;
          this.ID_PRODUCTO = ID_PRODUCTOIn;
          this.ID_SEDE = ID_SEDEIn;
          this.ID_UNIDAD_MEDIDA = ID_UNIDAD_MEDIDAIn;
          this.STOCK = STOCKIn;
          this.CANTIDAD_MIN = CANTIDAD_MINIn;
          this.CANTIDAD_MAX = CANTIDAD_MAXIn;
          this.ANULADO = ANULADOIn;
    }


    /** 
     * hasEqualMapping-method will compare two Stock instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Stock valueObject) {

          if (valueObject.getID_STOCK() != this.ID_STOCK) {
                    return(false);
          }
          if (valueObject.getID_PRODUCTO() != this.ID_PRODUCTO) {
                    return(false);
          }
          if (valueObject.getID_SEDE() != this.ID_SEDE) {
                    return(false);
          }
          if (valueObject.getID_UNIDAD_MEDIDA() != this.ID_UNIDAD_MEDIDA) {
                    return(false);
          }
          if (valueObject.getSTOCK() != this.STOCK) {
                    return(false);
          }
          if (valueObject.getCANTIDAD_MIN() != this.CANTIDAD_MIN) {
                    return(false);
          }
          if (valueObject.getCANTIDAD_MAX() != this.CANTIDAD_MAX) {
                    return(false);
          }
          if (valueObject.getANULADO() != this.ANULADO) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Stock, mapping to table STOCK\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_STOCK = " + this.ID_STOCK + "\n"); 
        out.append("ID_PRODUCTO = " + this.ID_PRODUCTO + "\n"); 
        out.append("ID_SEDE = " + this.ID_SEDE + "\n"); 
        out.append("ID_UNIDAD_MEDIDA = " + this.ID_UNIDAD_MEDIDA + "\n"); 
        out.append("STOCK = " + this.STOCK + "\n"); 
        out.append("CANTIDAD_MIN = " + this.CANTIDAD_MIN + "\n"); 
        out.append("CANTIDAD_MAX = " + this.CANTIDAD_MAX + "\n"); 
        out.append("ANULADO = " + this.ANULADO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Stock cloned = new Stock();

        cloned.setID_STOCK(this.ID_STOCK); 
        cloned.setID_PRODUCTO(this.ID_PRODUCTO); 
        cloned.setID_SEDE(this.ID_SEDE); 
        cloned.setID_UNIDAD_MEDIDA(this.ID_UNIDAD_MEDIDA); 
        cloned.setSTOCK(this.STOCK); 
        cloned.setCANTIDAD_MIN(this.CANTIDAD_MIN); 
        cloned.setCANTIDAD_MAX(this.CANTIDAD_MAX); 
        cloned.setANULADO(this.ANULADO); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
