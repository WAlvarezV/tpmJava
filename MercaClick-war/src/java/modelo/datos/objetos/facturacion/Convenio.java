/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package modelo.datos.objetos.facturacion;

import java.io.*;
import java.sql.*;
import java.util.*;
import java.math.*;

 /**
  * Convenio Value Object.
  * This class is value object representing database table CONVENIO
  * This class is intented to be used together with associated Dao object.
  */

 /**
  * This sourcecode has been generated by FREE DaoGen generator version 2.4.1.
  * The usage of generated code is restricted to OpenSource software projects
  * only. DaoGen is available in http://titaniclinux.net/daogen/
  * It has been programmed by Tuomo Lukka, Tuomo.Lukka@iki.fi
  *
  * DaoGen license: The following DaoGen generated source code is licensed
  * under the terms of GNU GPL license. The full text for license is available
  * in GNU project's pages: http://www.gnu.org/copyleft/gpl.html
  *
  * If you wish to use the DaoGen generator to produce code for closed-source
  * commercial applications, you must pay the lisence fee. The price is
  * 5 USD or 5 Eur for each database table, you are generating code for.
  * (That includes unlimited amount of iterations with all supported languages
  * for each database table you are paying for.) Send mail to
  * "Tuomo.Lukka@iki.fi" for more information. Thank you!
  */



public class Convenio implements Cloneable, Serializable {

    /** 
     * Persistent Instance variables. This data is directly 
     * mapped to the columns of database table.
     */
    private int ID_CONVENIO;
    private int ID_EMPRESA;
    private int ID_TIPO_CONVENIO;
    private String CONVENIO;
    private java.sql.Date FECHA_INICIAL;
    private java.sql.Date FECHA_FINAL;
    private double VALOR;
    private int ANULADO;



    /** 
     * Constructors. DaoGen generates two constructors by default.
     * The first one takes no arguments and provides the most simple
     * way to create object instance. The another one takes one
     * argument, which is the primary key of the corresponding table.
     */

    public Convenio () {

    }

    public Convenio (int ID_CONVENIOIn) {

          this.ID_CONVENIO = ID_CONVENIOIn;

    }


    /** 
     * Get- and Set-methods for persistent variables. The default
     * behaviour does not make any checks against malformed data,
     * so these might require some manual additions.
     */

    public int getID_CONVENIO() {
          return this.ID_CONVENIO;
    }
    public void setID_CONVENIO(int ID_CONVENIOIn) {
          this.ID_CONVENIO = ID_CONVENIOIn;
    }

    public int getID_EMPRESA() {
          return this.ID_EMPRESA;
    }
    public void setID_EMPRESA(int ID_EMPRESAIn) {
          this.ID_EMPRESA = ID_EMPRESAIn;
    }

    public int getID_TIPO_CONVENIO() {
          return this.ID_TIPO_CONVENIO;
    }
    public void setID_TIPO_CONVENIO(int ID_TIPO_CONVENIOIn) {
          this.ID_TIPO_CONVENIO = ID_TIPO_CONVENIOIn;
    }

    public String getCONVENIO() {
          return this.CONVENIO;
    }
    public void setCONVENIO(String CONVENIOIn) {
          this.CONVENIO = CONVENIOIn;
    }

    public java.sql.Date getFECHA_INICIAL() {
          return this.FECHA_INICIAL;
    }
    public void setFECHA_INICIAL(java.sql.Date FECHA_INICIALIn) {
          this.FECHA_INICIAL = FECHA_INICIALIn;
    }

    public java.sql.Date getFECHA_FINAL() {
          return this.FECHA_FINAL;
    }
    public void setFECHA_FINAL(java.sql.Date FECHA_FINALIn) {
          this.FECHA_FINAL = FECHA_FINALIn;
    }

    public double getVALOR() {
          return this.VALOR;
    }
    public void setVALOR(double VALORIn) {
          this.VALOR = VALORIn;
    }

    public int getANULADO() {
          return this.ANULADO;
    }
    public void setANULADO(int ANULADOIn) {
          this.ANULADO = ANULADOIn;
    }



    /** 
     * setAll allows to set all persistent variables in one method call.
     * This is useful, when all data is available and it is needed to 
     * set the initial state of this object. Note that this method will
     * directly modify instance variales, without going trough the 
     * individual set-methods.
     */

    public void setAll(int ID_CONVENIOIn,
          int ID_EMPRESAIn,
          int ID_TIPO_CONVENIOIn,
          String CONVENIOIn,
          java.sql.Date FECHA_INICIALIn,
          java.sql.Date FECHA_FINALIn,
          double VALORIn,
          int ANULADOIn) {
          this.ID_CONVENIO = ID_CONVENIOIn;
          this.ID_EMPRESA = ID_EMPRESAIn;
          this.ID_TIPO_CONVENIO = ID_TIPO_CONVENIOIn;
          this.CONVENIO = CONVENIOIn;
          this.FECHA_INICIAL = FECHA_INICIALIn;
          this.FECHA_FINAL = FECHA_FINALIn;
          this.VALOR = VALORIn;
          this.ANULADO = ANULADOIn;
    }


    /** 
     * hasEqualMapping-method will compare two Convenio instances
     * and return true if they contain same values in all persistent instance 
     * variables. If hasEqualMapping returns true, it does not mean the objects
     * are the same instance. However it does mean that in that moment, they 
     * are mapped to the same row in database.
     */
    public boolean hasEqualMapping(Convenio valueObject) {

          if (valueObject.getID_CONVENIO() != this.ID_CONVENIO) {
                    return(false);
          }
          if (valueObject.getID_EMPRESA() != this.ID_EMPRESA) {
                    return(false);
          }
          if (valueObject.getID_TIPO_CONVENIO() != this.ID_TIPO_CONVENIO) {
                    return(false);
          }
          if (this.CONVENIO == null) {
                    if (valueObject.getCONVENIO() != null)
                           return(false);
          } else if (!this.CONVENIO.equals(valueObject.getCONVENIO())) {
                    return(false);
          }
          if (this.FECHA_INICIAL == null) {
                    if (valueObject.getFECHA_INICIAL() != null)
                           return(false);
          } else if (!this.FECHA_INICIAL.equals(valueObject.getFECHA_INICIAL())) {
                    return(false);
          }
          if (this.FECHA_FINAL == null) {
                    if (valueObject.getFECHA_FINAL() != null)
                           return(false);
          } else if (!this.FECHA_FINAL.equals(valueObject.getFECHA_FINAL())) {
                    return(false);
          }
          if (valueObject.getVALOR() != this.VALOR) {
                    return(false);
          }
          if (valueObject.getANULADO() != this.ANULADO) {
                    return(false);
          }

          return true;
    }



    /**
     * toString will return String object representing the state of this 
     * valueObject. This is useful during application development, and 
     * possibly when application is writing object states in textlog.
     */
    public String toString() {
        StringBuffer out = new StringBuffer(this.getDaogenVersion());
        out.append("\nclass Convenio, mapping to table CONVENIO\n");
        out.append("Persistent attributes: \n"); 
        out.append("ID_CONVENIO = " + this.ID_CONVENIO + "\n"); 
        out.append("ID_EMPRESA = " + this.ID_EMPRESA + "\n"); 
        out.append("ID_TIPO_CONVENIO = " + this.ID_TIPO_CONVENIO + "\n"); 
        out.append("CONVENIO = " + this.CONVENIO + "\n"); 
        out.append("FECHA_INICIAL = " + this.FECHA_INICIAL + "\n"); 
        out.append("FECHA_FINAL = " + this.FECHA_FINAL + "\n"); 
        out.append("VALOR = " + this.VALOR + "\n"); 
        out.append("ANULADO = " + this.ANULADO + "\n"); 
        return out.toString();
    }


    /**
     * Clone will return identical deep copy of this valueObject.
     * Note, that this method is different than the clone() which
     * is defined in java.lang.Object. Here, the retuned cloned object
     * will also have all its attributes cloned.
     */
    public Object clone() {
        Convenio cloned = new Convenio();

        cloned.setID_CONVENIO(this.ID_CONVENIO); 
        cloned.setID_EMPRESA(this.ID_EMPRESA); 
        cloned.setID_TIPO_CONVENIO(this.ID_TIPO_CONVENIO); 
        if (this.CONVENIO != null)
             cloned.setCONVENIO(new String(this.CONVENIO)); 
        if (this.FECHA_INICIAL != null)
             cloned.setFECHA_INICIAL((java.sql.Date)this.FECHA_INICIAL.clone()); 
        if (this.FECHA_FINAL != null)
             cloned.setFECHA_FINAL((java.sql.Date)this.FECHA_FINAL.clone()); 
        cloned.setVALOR(this.VALOR); 
        cloned.setANULADO(this.ANULADO); 
        return cloned;
    }



    /** 
     * getDaogenVersion will return information about
     * generator which created these sources.
     */
    public String getDaogenVersion() {
        return "DaoGen version 2.4.1";
    }

}
